source('Myfunction.R')
Turnover_individual_mon <- readRDS('Output/Turnover_individual_mon2023.RDS')
head(Turnover_individual_mon,10)


Turnover_individual_mon <- Turnover_individual_mon[order(Turnover_individual_mon$month), ]#这一段代码可以不要，老师的代码本身就是按照mon来进行排序


#添加月份和年份列
Turnover_individual_mon$mon <- format(Turnover_individual_mon$month, "%m")
Turnover_individual_mon$Year <- format(Turnover_individual_mon$month, "%Y")


monthly_turnover_1 <- aggregate(Turnover_individual_mon$to_m, 
by = list(Year = Turnover_individual_mon$Year, 
Month = Turnover_individual_mon$mon), 
FUN = mean)
colnames(monthly_turnover_1) <- c("Year", "Month", "Mean_Turnover")
#1.这里的列命名才有用
#2.这里的FUN=mean代表求平均值


monthly_turnover_2 <- aggregate(Turnover_individual_mon$to_m, 
by = list(Month = Turnover_individual_mon$mon), FUN = mean)


monthly_turnover_3 <- aggregate(Turnover_individual_mon$to_m, 
by = list( Year = Turnover_individual_mon$Year), 
FUN = mean)


library(dplyr)
library(zoo)
conflicts_prefer(dplyr::mutate)
abturn_df<- Turnover_individual_mon %>%
  group_by(Stkcd) %>%
  mutate(prev_year_avg = rollapply(to_m, width = 12, FUN = mean, align = "right", fill = NA)) %>%
  mutate(abturn = to_m / prev_year_avg) %>%
  select(Stkcd, month, to_m,prev_year_avg,abturn) %>%
  ungroup()


Marketret_mon_stock2023 <- readRDS('Output/Marketret_mon_stock2023.RDS')
str(Marketret_mon_stock2023)
merged_data <- merge(abturn_df,Marketret_mon_stock2023,by='month',all.x=T)


#接下来去找个股的月度超额收益与merged_data进行合并
ret_mon <- readRDS('Output/ret_mon2023.RDS')
merged_data <- merge(merged_data,ret_mon,all.x = T)
merged_data <- merged_data %>% select(month,Stkcd,ret,floatingvalue,totalvalue,abturn,marketret3,marketret6,marketret12)
merged_data_copy <- merged_data


#接下来进行quintile以及简单加权
merged_data <- merged_data %>%
  group_by(month) %>%
  mutate(quintile = ntile(abturn, 5))
#注意，数据框里的quintile列里的数值代表的是第几组
quintile_returns <- merged_data %>%
  group_by(month, quintile) %>%
  summarize(avg_ret = mean(ret))
#这段代码的作用是根据月份（month）和分位数（quintile）对数据进行分组，并计算每个分组中收益率（ret）的平均值（avg_ret）
long_short_returns <- quintile_returns %>%
  filter(quintile == 1 | quintile == 5) %>%
  group_by(month) %>%
  summarize(long_short_ret = mean(avg_ret[quintile == 5]) - mean(avg_ret[quintile == 1]))


#接下来计算市值加权的ret（分别计算流通市值以及总市值）
#流通市值加权
quintile_returns_floatingvalue <- merged_data %>%
  group_by(month, quintile) %>%
  summarize(floatingvalue_weighted_avg_ret = weighted.mean(ret, w = floatingvalue))
long_short_returns_floatingvalue<- quintile_returns_floatingvalue %>%
  filter(quintile == 1 | quintile == 5) %>%
  group_by(month) %>%
  summarize(long_short_ret_floatingvalue= mean(floatingvalue_weighted_avg_ret[quintile == 5]) - mean(floatingvalue_weighted_avg_ret[quintile == 1]))
#总市值加权
quintile_returns_totalvalue <- merged_data %>%
  group_by(month, quintile) %>%
  summarize(totalvalue_weighted_avg_ret = weighted.mean(ret, w = totalvalue))
long_short_returns_totalvalue<- quintile_returns_totalvalue %>%
  filter(quintile == 1 | quintile == 5) %>%
  group_by(month) %>%
  summarize(long_short_ret_totalvalue = mean(totalvalue_weighted_avg_ret[quintile == 5]) - mean(totalvalue_weighted_avg_ret[quintile == 1]))


#合并三个数据表
long_short_returns_total <- merge(merge(long_short_returns,long_short_returns_floatingvalue),long_short_returns_totalvalue,all.x = T)


#表格底部插入33年来396个月（没这么多月）投资组合月度平均收益
mean_portfolio_excess_returns <- long_short_returns_total %>% summarise_all(.funs=list(mean))
long_short_returns_total <- bind_rows(long_short_returns_total,mean_portfolio_excess_returns)
#不能像下面这样输入，会导致第一列变为字符型
long_short_returns_total[387,'month'] <- as.character(long_short_returns_total[387,'month'])
long_short_returns_total[387,'month'] <- 'portfoliomonth_average_return'
#只能这样
long_short_returns_total[387,'month'] <- NA


#4.16接下来进行Fama-MacBath两步法
#首先不加入abturn变量，仅仅使用MKT作为independent variable
merged_data <- na.omit(merged_data)#删除NA行
library(dplyr)
library(sandwich)
library(lmtest)
# 第一步：时间序列回归，这里添加了α，没用滚动窗口
betas <- merged_data %>%
  group_by(Stkcd) %>%
  do({
    model <- lm(ret~ marketret3, data = .)
    data.frame(Stkcd = .$Stkcd[1] , alpha_i = coef(model)["(Intercept)"] , beta_i = coef(model)["marketret3"])
  })
FMsecond_step_df <- merge(merged_data,betas,by='Stkcd',all.x = T) %>% arrange(month)
#第二部：截面回归
#自己写的
gammas <- FMsecond_step_df %>% 
  group_by(month) %>%
  do({
    model <- lm(ret~beta_i,data= .)
    data.frame( gamma_i = coef(model)["(Intercept)"] , lambda_i = coef(model)["beta_i"])
  })
average_gamma_i <- mean(gammas$gamma_i)
average_lambda_i <- mean(gammas$lambda_i)
new_row <- data.frame(month = NA,gamma_i = average_gamma_i,lambda_i = average_lambda_i)
gammas <- bind_rows(gammas,new_row)
# 计算NW t-statistic以及Shanken t-statistic
library(sandwich)
library(lmtest)
model <- lm(ret ~ beta_i, data = FMsecond_step_df)
nw_test <- coeftest(model, vcov = NeweyWest(model, lag = 1, prewhite = FALSE))
shanken_test <- sqrt(length(residuals(model))) * coef(model)[2] / sqrt(sum(residuals(model)^2))
# 输出结果
head(nw_test)
head(shanken_test)


#接下来加入abturn自变量（注意是想用t-1解释t）
#第一步时序回归
betas2 <- merged_data %>%
  group_by(Stkcd) %>%
  mutate(lag_abturn = lag(na.omit(abturn), 1)) %>%
  filter(!is.na(lag_abturn)) %>%
  do({
    model <- lm(ret ~ lag_abturn + marketret3, data = .)
    data.frame(Stkcd = .$Stkcd[1], 
               alpha_i2 = coef(model)["(Intercept)"],
               beta_abturn = coef(model)["lag_abturn"], 
               beta_MKT2 = coef(model)["marketret3"])
  })
FMsecond_step_df2 <- merge(FMsecond_step_df,betas2,by='Stkcd',all.x = T) %>% arrange(month)
#第二部：截面回归
gammas2 <- FMsecond_step_df2 %>% 
  group_by(month) %>%
  do({
    model <- lm(ret ~ beta_abturn + beta_MKT2, data= .)
    data.frame(gamma_i2 = coef(model)["(Intercept)"], lambda_i2 = coef(model)["beta_abturn"],lambda_i3 = coef(model)["beta_MKT2"])
  })
average_gamma_i2 <- mean(gammas2$gamma_i2)
average_lambda_i2 <- mean(gammas2$lambda_i2)
average_lambda_i3 <- mean(gammas2$lambda_i3)
new_row2 <- data.frame(month = NA,gamma_i2 = average_gamma_i2,lambda_i2 = average_lambda_i2,lambda_i3 = average_lambda_i3)
gammas2 <- bind_rows(gammas2,new_row2)
# 计算NW t-statistic以及Shanken t-statistic
model2 <- lm(ret ~ beta_abturn + beta_MKT2,data = FMsecond_step_df2)
nw_test2 <- coeftest(model2, vcov = NeweyWest(model2, lag = 1, prewhite = FALSE))
shanken_test2 <- sqrt(length(residuals(model2))) * coef(model2)[2] / sqrt(sum(residuals(model2)^2))
# 输出结果
head(nw_test2)
head(shanken_test2)